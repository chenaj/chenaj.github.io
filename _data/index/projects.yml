# projects section data
# If you don't have language feature(language.yml is empty), ignore "i18n" items
# Suggest projects' img be located at '/static/assets/img/landing', and edit following img items.
- name: QuixBugs - A Multi-Lingual Program Repair Benchmark Set
  i18n: quixbugs
  gh_user: jkoppel
  repo: QuixBugs
  img: /static/assets/img/landing/quixey.png
  desc: Collaborated with MIT researchers to work on providing an open access benchmark test suite. In this project, the benchmark test suite is used for evaluating the performance of multi-language program repair tools. The test suite contains 40 different buggy code sets from Quixey Challenge in Python and Java. Published at ACM SIGPLAN International Conference in Systems, Programming, Languages and Applications Software for Humanity (SPLASH) Companion 2017.

- name: Space Mission Instrumentation Testing Design
  i18n: kasper
  url: http://mdp.engin.umich.edu/wp-content/uploads/2016/07/2017-Ziggy-PIMS-2.pdf
  img: /static/assets/img/landing/ziggy.png
  desc: Worked in a team of fourteen on a multidisciplinary project to designing a real time system for detecting and displaying currents produced by three high flux particle accelerators. The instrument will measure charged particles around the Jovian moon Europa to determine the depth and salinity of the ocean --- it’s been shown that Europa has more liquid water than Earth, and possible location for life in the solar system after Earth. Analyzed technical requirements of software based on mechanical and electrical team’s input and touched base weekly for any changing specifications. Lead the software group in the development process of computer interface for collecting real time data and beam diagnosis implemented in python and pydaqmx. This project is guided by university’s faculty advisors and funded by NASA JPL and Smithsonian Laboratory.

- name: Visualizing Binaries for Low-level File Analysis
  url: http://community.wolfram.com/groups/-/m/t/887456
  img: /static/assets/img/landing/malware.png
  desc: The application module takes in a file in binary data form and translate it to 2D/3D spatial representations in Mathematica. Combined Hilbert Curve and Shannon Entropy to detect regions with malware in files. This also can have applications in reverse engineering and forensic analysis. The project earned recognition in the Wolfram Community and featured in Wolfram Science program and earned recognition in Wolfram Community.

- name: Fun with Fooling Web Users and SSL Stripping Attack
  i18n: google
  url: https://docs.google.com/presentation/d/1GpH9-E6RzVPq9yn9tRiCaywBbSvzqv9Q0sUfk6ywvzo/edit?usp=sharing
  img: /static/assets/img/landing/black_hat.jpg
  desc: Worked in team of 3 to set up a virtual network testbed to carry out an attack on SSL connection. Instances of targeted host’s web page will be swapped out for our malicious web page by downgrading SSL connection to a regular one. Web pages are developed using Flask microframework and stripped using SSL stripping tool. Implemented different phishing attacks such as clickjacking, homograph, picture-in-picture attacks. Explored how to design more secure systems to mitigate the attack.

- name: Coordination Models for Ad Hoc Programming Teams
  gh_user: panavrin
  repo: crowd_project
  img: /static/assets/img/landing/crowdsource.jpg
  desc: Worked in a team of 5 to research into the possibility of crowdsourcing software engineering. We explored the types and causes of these coordination costs in remote ad hoc teams using version control system/synchronous editor, and compared overall performance to that of independent workers. Based on our findings, we built a shared programming environment designed to help teams efficiently coordinate by integrating features from both version control and synchronous coordination. The environment is set up with Meteor.js framework.

- name: Genetic Algorithm Search for Image Approximation
  gh_user: chenaj
  repo: Genetic-Algorithm
  img: /static/assets/img/landing/monaeyes.gif
  desc: Recreated Roger Alsing's work on AI genetic algorithm to create art by rendering a string of 'DNA' that defined shapes of polygons. The polygons mutate to generate a picture as close to the original image input with each generation. The program is implemented in C++ and uses OpenCV to configured with different polygon mutations. These shapes are ran through a fitness score where the best fitted shapes will survive.


